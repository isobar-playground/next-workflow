/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ArticleContentItem = {
  type?: Type;
  attributes?: Attributes;
  relationships?: Relationships;
  [k: string]: unknown;
} & Resource;
export type Type = "node--article";
export type ID = number;
export type RevisionID = number;
export type Language = string;
/**
 * The time that the current revision was created.
 */
export type RevisionCreateTime = number;
/**
 * Briefly describe the changes you have made.
 */
export type RevisionLogMessage = string;
export type Published = boolean;
export type Title = string;
/**
 * The time that the node was created.
 */
export type AuthoredOn = number;
/**
 * The time that the node was last edited.
 */
export type Changed = number;
export type PromotedToFrontPage = boolean;
export type StickyAtTopOfLists = boolean;
/**
 * A flag indicating whether this is the default translation.
 */
export type DefaultTranslation = boolean;
/**
 * A flag indicating whether this was a default revision when it was saved.
 */
export type DefaultRevision = boolean;
/**
 * Indicates if the last edit of a translation belongs to current revision.
 */
export type RevisionTranslationAffected = boolean;
/**
 * The moderation state of this piece of content.
 */
export type ModerationState = string;
export type PathAlias = string;
export type PathId = number;
export type LanguageCode = string;
export type Text = string;
export type TextFormat = string;
export type Summary = string;
export type ReferencedResource = "node_type--node_type";
export type ResourceID = string;
export type ContentTypeID = string;
export type ReferencedResource1 = "user--user";
export type ResourceID1 = string;
export type UserID = number;
export type ReferencedResource2 = "user--user";
export type ResourceID2 = string;
export type UserID1 = number;
export type ReferencedResource3 = "menu_link_content--menu_link_content";
export type ResourceID3 = string;
export type CustomMenuLinkID = number;

/**
 * Entity attributes
 */
export interface Attributes {
  drupal_internal__nid?: ID;
  drupal_internal__vid?: RevisionID;
  langcode?: Language;
  revision_timestamp?: RevisionCreateTime;
  revision_log?: RevisionLogMessage;
  status?: Published;
  title: Title;
  created?: AuthoredOn;
  changed?: Changed;
  promote?: PromotedToFrontPage;
  sticky?: StickyAtTopOfLists;
  default_langcode?: DefaultTranslation;
  revision_default?: DefaultRevision;
  revision_translation_affected?: RevisionTranslationAffected;
  moderation_state?: ModerationState;
  metatag?: MetatagsHiddenFieldForJSONSupport;
  path?: URLAlias;
  body?: Body;
}
/**
 * The meta tags for the entity.
 */
export interface MetatagsHiddenFieldForJSONSupport {
  [k: string]: unknown;
}
export interface URLAlias {
  alias?: PathAlias;
  pid?: PathId;
  langcode?: LanguageCode;
  [k: string]: unknown;
}
export interface Body {
  value: Text;
  format?: TextFormat;
  summary?: Summary;
  [k: string]: unknown;
}
/**
 * Entity relationships
 */
export interface Relationships {
  node_type?: ContentType;
  revision_uid?: RevisionUser;
  uid?: AuthoredBy;
  menu_link?: MenuLink;
}
export interface ContentType {
  data?: {
    type: ReferencedResource;
    id: ResourceID;
    meta?: ContentTypeID;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface RevisionUser {
  data?: {
    type: ReferencedResource1;
    id: ResourceID1;
    meta?: UserID;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface AuthoredBy {
  data?: {
    type: ReferencedResource2;
    id: ResourceID2;
    meta?: UserID1;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface MenuLink {
  data?: {
    type: ReferencedResource3;
    id: ResourceID3;
    meta?: CustomMenuLinkID;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * "Resource objects" appear in a JSON:API document to represent resources.
 */
export interface Resource {
  type: string;
  id: string;
  attributes?: Attributes1;
  relationships?: Relationships1;
  links?: Links;
  meta?: Meta;
}
/**
 * Members of the attributes object ("attributes") represent information about the resource object in which it's defined.
 */
export interface Attributes1 {
  /**
   * Attributes may contain any valid JSON value.
   *
   * This interface was referenced by `Attributes1`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9](?:[-\w]*[a-zA-Z0-9])?$".
   */
  [k: string]: {
    [k: string]: unknown;
  };
}
/**
 * Members of the relationships object ("relationships") represent references from the resource object in which it's defined to other resource objects.
 */
export interface Relationships1 {
  /**
   * This interface was referenced by `Relationships1`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9](?:[-\w]*[a-zA-Z0-9])?$".
   */
  [k: string]: {
    [k: string]: unknown;
  };
}
export interface Links {
  /**
   * A link **MUST** be represented as either: a string containing the link's URL or a link object.
   */
  [k: string]:
    | string
    | {
        /**
         * A string containing the link's URL.
         */
        href: string;
        meta?: Meta;
        [k: string]: unknown;
      };
}
/**
 * Non-standard meta-information that can not be represented as an attribute or relationship.
 */
export interface Meta {
  [k: string]: unknown;
}
